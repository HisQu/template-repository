# .github/workflows/sync-to-existing-repos.yml (in your TEMPLATE repository)
name: Sync Settings to Existing Repos

on:
  workflow_dispatch:
    inputs:
      target_repos:
        description: 'Comma-separated list of target repos (owner/repo,owner/repo)'
        required: true
      template_repo:
        description: 'Template repository (owner/repo)'
        required: true
        default: 'HisQu/template-repository'
      force_update_issue_templates:
        description: 'Overwrite existing issue templates in target repos? (true/false)'
        required: true
        default: 'false'
        type: boolean

jobs:
  sync-settings:
    runs-on: ubuntu-latest
    steps:
      # Checkout the template repo code to get access to issue template files
      - name: Checkout Template Repo Code
        uses: actions/checkout@v4

      - name: Sync Labels and Issue Templates
        uses: actions/github-script@v7
        env:
          # Use the PAT stored as a secret
          SYNC_PAT: ${{ secrets.ORG_SYNC_PAT }}
          TEMPLATE_REPO_PATH: ${{ github.workspace }} # Path where template code is checked out
        with:
          # Use the PAT for API calls
          github-token: ${{ env.SYNC_PAT }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { Buffer } = require('buffer'); // Needed for Base64 encoding

            // --- Inputs ---
            const templateRepoInput = "${{ github.event.inputs.template_repo }}";
            const targetReposInput = "${{ github.event.inputs.target_repos }}";
            const forceUpdateIssueTemplates = ${{ github.event.inputs.force_update_issue_templates }};
            const templateDir = process.env.TEMPLATE_REPO_PATH; // e.g., /home/runner/work/template-repo/template-repo

            // --- Configuration ---
            const issueTemplateSourceDir = path.join(templateDir, '.github', 'ISSUE_TEMPLATE');
            const issueTemplateTargetDir = '.github/ISSUE_TEMPLATE'; // Target path in remote repo

            // --- Helper Functions ---
            // Function to get labels from a repo
            async function getLabels(owner, repo) {
              console.log(`Workspaceing labels from ${owner}/${repo}...`);
              try {
                const labels = await github.paginate(github.rest.issues.listLabelsForRepo, { owner, repo });
                console.log(`Found ${labels.length} labels in ${owner}/${repo}.`);
                return labels;
              } catch (error) {
                core.error(`Error fetching labels from ${owner}/${repo}: ${error.message}`);
                return null; // Return null to indicate failure
              }
            }

            // Function to create a label if it doesn't exist (case-insensitive check)
            async function createLabelIfNotExists(targetOwner, targetRepo, targetLabels, templateLabel) {
              const lowerCaseTargetLabels = new Set(targetLabels.map(l => l.name.toLowerCase()));
              if (!lowerCaseTargetLabels.has(templateLabel.name.toLowerCase())) {
                console.log(`Creating label "${templateLabel.name}" in ${targetOwner}/${targetRepo}`);
                try {
                  await github.rest.issues.createLabel({
                    owner: targetOwner,
                    repo: targetRepo,
                    name: templateLabel.name,
                    color: templateLabel.color,
                    description: templateLabel.description || '',
                  });
                  return true; // Indicate creation
                } catch (error) {
                  core.error(`Failed to create label "${templateLabel.name}" in ${targetOwner}/${targetRepo}: ${error.message}`);
                  return false; // Indicate failure
                }
              } else {
                 console.log(`Label "${templateLabel.name}" already exists in ${targetOwner}/${targetRepo}.`);
                 return false; // Indicate no creation needed
              }
            }

             // Function to sync an issue template file
            async function syncIssueTemplate(targetOwner, targetRepo, templateFilePath) {
              const fileName = path.basename(templateFilePath);
              const targetPath = `${issueTemplateTargetDir}/${fileName}`; // Use forward slashes for API path
              console.log(`Syncing issue template ${fileName} to ${targetOwner}/${targetRepo} at ${targetPath}`);

              let targetFileSha = null;
              try {
                const { data: existingFile } = await github.rest.repos.getContent({
                  owner: targetOwner,
                  repo: targetRepo,
                  path: targetPath,
                });
                targetFileSha = existingFile.sha;
                console.log(`Found existing issue template ${fileName} with SHA: ${targetFileSha}`);
              } catch (error) {
                if (error.status !== 404) {
                  core.error(`Error checking for existing file ${targetPath} in ${targetOwner}/${targetRepo}: ${error.message}`);
                  return false; // Indicate failure
                }
                console.log(`Issue template ${fileName} does not exist in ${targetOwner}/${targetRepo}.`);
              }

              if (targetFileSha && !forceUpdateIssueTemplates) {
                console.log(`Skipping update for ${fileName} as it exists and force_update is false.`);
                return true; // Indicate success (no action needed)
              }

              try {
                const fileContent = fs.readFileSync(templateFilePath, 'utf8');
                const contentBase64 = Buffer.from(fileContent).toString('base64');

                await github.rest.repos.createOrUpdateFileContents({
                  owner: targetOwner,
                  repo: targetRepo,
                  path: targetPath,
                  message: `Sync issue template ${fileName} from template repo`,
                  content: contentBase64,
                  sha: targetFileSha, // Provide SHA if updating, otherwise it's null/undefined for creation
                });
                console.log(`Successfully created/updated ${fileName} in ${targetOwner}/${targetRepo}`);
                return true; // Indicate success
              } catch (error) {
                core.error(`Error creating/updating issue template ${fileName} in ${targetOwner}/${targetRepo}: ${error.message}`);
                return false; // Indicate failure
              }
            }

            // --- Main Logic ---
            const [templateOwner, templateRepoName] = templateRepoInput.split('/');
            const targetRepoList = targetReposInput.split(',').map(repo => repo.trim());

            // 1. Get labels from the template repository
            const templateLabels = await getLabels(templateOwner, templateRepoName);
            if (!templateLabels) {
               core.setFailed(`Could not fetch labels from template repo ${templateOwner}/${templateRepoName}. Aborting.`);
               return;
            }

            // 2. Get list of issue template files from template repo checkout
            let issueTemplateFiles = [];
            try {
              if (fs.existsSync(issueTemplateSourceDir)) {
                issueTemplateFiles = fs.readdirSync(issueTemplateSourceDir)
                                      .filter(file => file.endsWith('.yml') || file.endsWith('.md')) // Include .md and .yml
                                      .map(file => path.join(issueTemplateSourceDir, file));
                console.log(`Found issue template files to sync: ${issueTemplateFiles.map(f => path.basename(f)).join(', ')}`);
              } else {
                 console.log(`Issue template source directory ${issueTemplateSourceDir} not found. Skipping issue template sync.`);
              }
            } catch (error) {
               core.warning(`Error reading issue template directory ${issueTemplateSourceDir}: ${error.message}. Skipping issue template sync.`);
            }


            // 3. Iterate through target repositories and sync
            let overallSuccess = true;
            for (const targetRepoFullName of targetRepoList) {
              const [targetOwner, targetRepoName] = targetRepoFullName.split('/');
              if (!targetOwner || !targetRepoName) {
                  core.warning(`Skipping invalid target repo format: ${targetRepoFullName}`);
                  continue;
              }
              console.log(`\n--- Processing target repo: ${targetOwner}/${targetRepoName} ---`);

              // Sync Labels
              const targetLabels = await getLabels(targetOwner, targetRepoName);
               if (targetLabels === null) {
                 core.warning(`Skipping label sync for ${targetOwner}/${targetRepoName} due to fetch error.`);
                 overallSuccess = false; // Mark as failed if we can't even get target labels
                 continue; // Skip to next repo if we can't get labels
               }

              let labelsCreatedCount = 0;
              for (const label of templateLabels) {
                  if (await createLabelIfNotExists(targetOwner, targetRepoName, targetLabels, label)) {
                      labelsCreatedCount++;
                  }
              }
              console.log(`Finished label sync for ${targetOwner}/${targetRepoName}. Created ${labelsCreatedCount} labels.`);

               // Sync Issue Templates
              if (issueTemplateFiles.length > 0) {
                console.log(`Starting issue template sync for ${targetOwner}/${targetRepoName}...`);
                let templatesSyncedCount = 0;
                 for (const templateFile of issueTemplateFiles) {
                   if (await syncIssueTemplate(targetOwner, targetRepoName, templateFile)) {
                       templatesSyncedCount++;
                   } else {
                       overallSuccess = false; // Mark as failed if any template sync fails
                   }
                 }
                 console.log(`Finished issue template sync for ${targetOwner}/${targetRepoName}. Processed ${templatesSyncedCount} templates.`);
              } else {
                 console.log(`No issue templates found in template repo to sync.`);
              }
            } // End loop through target repos

            console.log('\n--- Sync Process Complete ---');
            if (!overallSuccess) {
               core.setFailed('One or more errors occurred during the sync process. Check logs above.');
            }

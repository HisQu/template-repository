name: Add New Issue to HisQu Classic Project

on:
  issues:
    types: [opened]

jobs:
  add-to-classic-project:
    runs-on: ubuntu-latest
    permissions:
      issues: write # Required to access issue details like node_id.
      repository-projects: write 

    steps:
      - name: Add issue to HisQu classic project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectFullName = "HisQu/1"; // Expected format: ownerName/projectNumber (e.g., MyOrg/1)
            const [ownerName, projectNumberStr] = projectFullName.split('/');
            const projectNumber = parseInt(projectNumberStr, 10);

            if (!ownerName || isNaN(projectNumber)) {
              core.setFailed(`Invalid project format "${projectFullName}". Expected 'ownerName/projectNumber'.`);
              return;
            }

            core.info(`Attempting to find classic project: ${ownerName}/${projectNumber}`);
            let projectData;
            try {
              // Assuming ownerName is an organization. If it could be a user, you'd need more logic.
              const { data: orgProjects } = await github.rest.projects.listForOrg({
                org: ownerName,
                state: 'open',
                per_page: 100 // Adjust if you have more than 100 open projects in the org
              });
              projectData = orgProjects.find(p => p.number === projectNumber);
            } catch (error) {
              core.setFailed(`Error fetching projects for organization "${ownerName}": ${error.message}. Check if the organization name is correct and the token has 'read:org' (for org projects) or equivalent permissions if using PAT.`);
              return;
            }

            if (!projectData) {
              core.setFailed(`Classic project "${projectFullName}" not found for organization "${ownerName}".`);
              return;
            }
            core.info(`Found classic project: "${projectData.name}" (ID: ${projectData.id})`);

            const { data: columns } = await github.rest.projects.listColumns({
              project_id: projectData.id
            });

            if (columns.length === 0) {
              core.setFailed(`No columns found in project "${projectFullName}". An issue cannot be added.`);
              return;
            }
            const firstColumn = columns[0];
            core.info(`Project has ${columns.length} column(s). Target column for new issues: "${firstColumn.name}" (ID: ${firstColumn.id})`);

            const issuePayload = context.payload.issue;
            if (!issuePayload) {
              core.setFailed("Issue payload is not available in the context.");
              return;
            }
            const issueNumber = issuePayload.number;
            const issueNodeId = issuePayload.node_id;

            if (!issueNodeId) {
              core.setFailed(`Issue node_id is missing in the event payload for issue #${issueNumber}. Cannot add to project.`);
              return;
            }
            
            core.info(`Attempting to add issue #${issueNumber} (Node ID: ${issueNodeId}) to the first column of project "${projectFullName}".`);

            try {
              await github.rest.projects.createCard({
                column_id: firstColumn.id,
                content_id: issueNodeId,
                content_type: 'Issue',
              });
              core.info(`Successfully added issue #${issueNumber} to project "${projectFullName}" in column "${firstColumn.name}".`);
            } catch (error) {
              const errorMessage = String(error.message || '').toLowerCase();
              // Check for HTTP 422 status and common phrases indicating the card/issue already exists.
              if (error.status === 422 && (errorMessage.includes('already exists') || errorMessage.includes('already in project') || errorMessage.includes('is already taken') || errorMessage.includes('project card already exists'))) {
                core.info(`Issue #${issueNumber} is already in project "${projectFullName}" (API Message: ${error.message}). No further action needed for adding.`);
              } else {
                // For any other error, fail the action.
                core.setFailed(`Failed to add issue #${issueNumber} to project "${projectFullName}". Error: ${error.message} (Status: ${error.status})`);
                // For detailed debugging, you might want to log the full error object:
                // console.error("Full error object:", JSON.stringify(error, null, 2));
              }
            }

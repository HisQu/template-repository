name: Add New Issue to HisQu Project (V2)

on:
  issues:
    types: [opened]

jobs:
  add-to-project-v2:
    runs-on: ubuntu-latest
    permissions:
      issues: read # Required to get issue.node_id
      # For Projects V2, GITHUB_TOKEN can often interact with organization projects
      # if repository and organization settings permit. No specific 'projects-v2: write' permission key.
      # If GITHUB_TOKEN is insufficient, you might need a PAT with 'project' or 'write:project' scope.
      # Your sync script uses 'SYNC_PAT', so you might consider that here if needed.

    steps:
      - name: Add issue to HisQu Project (V2)
        uses: actions/github-script@v7
        with:
          # If GITHUB_TOKEN doesn't have enough permissions for your org project,
          # you might need to use a PAT with 'project' scope, similar to your sync script:
          # github-token: ${{ secrets.YOUR_PAT_WITH_PROJECT_SCOPE }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const orgLogin = "HisQu"; // Your organization's login name
            const projectV2Title = "HisQu"; // The exact title of your Project V2
            // If your project has a number in the UI (e.g., /orgs/HisQu/projects/1),
            // you can also query by number, but title is often robust.

            const issuePayload = context.payload.issue;
            if (!issuePayload) {
              core.setFailed("Issue payload is not available in the context.");
              return;
            }
            const issueNodeId = issuePayload.node_id;
            const issueNumber = issuePayload.number;
            const repoName = context.repo.repo;
            const ownerName = context.repo.owner;

            if (!issueNodeId) {
              core.setFailed(`Issue node_id is missing for issue #${issueNumber}. Cannot add to project.`);
              return;
            }

            core.info(`Attempting to add issue #${issueNumber} (Node ID: ${issueNodeId}) from ${ownerName}/${repoName} to Project V2 titled "${projectV2Title}" in org "${orgLogin}".`);

            let projectV2Id;
            try {
              core.info(`Fetching ID for Project V2 titled "${projectV2Title}"...`);
              const projectQueryResult = await github.graphql(
                \`query FindProjectV2($orgLogin: String!, $projectV2Title: String!) {
                  organization(login: $orgLogin) {
                    projectsV2(query: $projectV2Title, first: 1) {
                      nodes {
                        id
                        title
                      }
                    }
                  }
                }\`,
                { orgLogin, projectV2Title }
              );

              const projects = projectQueryResult.organization.projectsV2.nodes;
              if (projects.length > 0 && projects[0].title === projectV2Title) { // Verify exact title match
                projectV2Id = projects[0].id;
                core.info(`Found Project V2: "${projects[0].title}" (ID: ${projectV2Id})`);
              } else {
                core.setFailed(`Project V2 with title "${projectV2Title}" not found under organization "${orgLogin}". Please check the project title and organization name.`);
                return;
              }
            } catch (error) {
              core.setFailed(`Error finding Project V2 "${projectV2Title}": ${error.message}`);
              return;
            }

            try {
              core.info(`Adding issue (Content ID: ${issueNodeId}) to project (Project ID: ${projectV2Id})...`);
              await github.graphql(
                \`mutation AddItemToProjectV2($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item {
                      id
                    }
                  }
                }\`,
                { projectId: projectV2Id, contentId: issueNodeId }
              );
              core.info(`Issue #${issueNumber} successfully added to Project V2 "${projectV2Title}".`);
            } catch (error) {
              const errorMessage = String(error.message || '').toLowerCase();
              // Check for common phrases indicating the item is already in the project
              if (errorMessage.includes('already part of this project') || errorMessage.includes('item already exists') || (error.errors && error.errors.some(e => e.message.toLowerCase().includes('already been added')))) {
                core.info(`Issue #${issueNumber} is already in Project V2 "${projectV2Title}". (API Message: ${error.message})`);
              } else {
                core.setFailed(`Error adding issue #${issueNumber} to Project V2 "${projectV2Title}": ${error.message}`);
                // For detailed GraphQL errors:
                // core.error(JSON.stringify(error));
              }
            }

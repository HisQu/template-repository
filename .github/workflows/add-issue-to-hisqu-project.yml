name: Add New Issue to HisQu Project (V2)

on:
  issues:
    types: [opened]

jobs:
  add-to-project-v2:
    runs-on: ubuntu-latest
    permissions:
      issues: read # Required to get issue.node_id
      # For Projects V2, GITHUB_TOKEN can often interact with organization projects
      # if repository and organization settings permit.
      # If GITHUB_TOKEN is insufficient, you might need a PAT with 'project' or 'write:project' scope.

    steps:
      - name: Add issue to HisQu Project (V2)
        uses: actions/github-script@v7
        with:
          # If GITHUB_TOKEN doesn't have enough permissions for your org project,
          # you might need to use a PAT with 'project' scope:
          # github-token: ${{ secrets.YOUR_PAT_WITH_PROJECT_SCOPE }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const orgLogin = "HisQu";         // Your organization's login name
            const projectV2Number = 1;        // <<<< SET YOUR PROJECT V2 NUMBER HERE (e.g., 1 if it's "HisQu/1")

            const issuePayload = context.payload.issue;
            if (!issuePayload) {
              core.setFailed("Issue payload is not available in the context.");
              return;
            }
            const issueNodeId = issuePayload.node_id;
            const issueNumber = issuePayload.number;
            const repoName = context.repo.repo;
            const ownerName = context.repo.owner;

            if (!issueNodeId) {
              core.setFailed(`Issue node_id is missing for issue #${issueNumber}. Cannot add to project.`);
              return;
            }

            core.info(`Attempting to add issue #${issueNumber} (Node ID: ${issueNodeId}) from ${ownerName}/${repoName} to Project V2 number ${projectV2Number} in org "${orgLogin}".`);

            let projectV2Id;
            let projectV2Title; // To store the actual title of the found project
            try {
              core.info(`Fetching ID for Project V2 number ${projectV2Number} in org "${orgLogin}"...`);
              const projectQueryResult = await github.graphql(
                `query FindProjectByNumber($orgLogin: String!, $projectV2Number: Int!) {
                  organization(login: $orgLogin) {
                    projectV2(number: $projectV2Number) { # Query by number
                      id
                      title
                    }
                  }
                }`,
                { orgLogin, projectV2Number }
              );

              if (projectQueryResult.organization && projectQueryResult.organization.projectV2) {
                projectV2Id = projectQueryResult.organization.projectV2.id;
                projectV2Title = projectQueryResult.organization.projectV2.title; // Get the actual title
                core.info(`Found Project V2: "${projectV2Title}" (ID: ${projectV2Id}) by number ${projectV2Number}.`);
              } else {
                core.setFailed(`Project V2 number ${projectV2Number} not found under organization "${orgLogin}". Please check the project number.`);
                return;
              }
            } catch (error) {
              core.setFailed(`Error finding Project V2 number ${projectV2Number} for org "${orgLogin}": ${error.message}`);
              return;
            }

            try {
              core.info(`Adding issue (Content ID: ${issueNodeId}) to project "${projectV2Title}" (Project ID: ${projectV2Id})...`);
              await github.graphql(
                `mutation AddItemToProjectV2($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item {
                      id
                    }
                  }
                }`,
                { projectId: projectV2Id, contentId: issueNodeId }
              );
              core.info(`Issue #${issueNumber} successfully added to Project V2 "${projectV2Title}".`);
            } catch (error) {
              const errorMessage = String(error.message || '').toLowerCase();
              let isAlreadyExistsError = false;
              if (errorMessage.includes('already part of this project') || errorMessage.includes('item already exists')) {
                isAlreadyExistsError = true;
              } else if (error.errors && Array.isArray(error.errors) && error.errors.length > 0) {
                isAlreadyExistsError = error.errors.some(e => String(e.message || '').toLowerCase().includes('already been added'));
              }
              
              if (isAlreadyExistsError) {
                core.info(`Issue #${issueNumber} is already in Project V2 "${projectV2Title}". (API Message: ${error.message})`);
              } else {
                core.setFailed(`Error adding issue #${issueNumber} to Project V2 "${projectV2Title}": ${error.message}`);
              }
            }

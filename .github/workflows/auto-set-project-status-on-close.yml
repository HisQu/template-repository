name: Auto Set Project Status to Done on Close

on:
  issues:
    types:
      - closed
  pull_request:
    types:
      - closed
      - merged

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read # Changed to read, write not strictly needed for this workflow
      pull-requests: read # Changed to read, write not strictly needed for this workflow
      # No 'projects: write' here, relying on PAT scopes as discussed

    steps:
      - name: Get Issue/PR Node ID, Repo Info, and Project ID
        id: get_initial_ids # Renamed ID for clarity
        env:
          ORG_NAME: HisQu
          PROJECT_TITLE: HisQu
          GITHUB_TOKEN: ${{ secrets.ORG_SYNC_PAT }}
        run: |
          ITEM_CONTENT_ID="" # This will store the global ID of the Issue/PR
          REPO_NAME=""
          REPO_OWNER=""

          if [[ "${{ github.event_name }}" == "issues" ]]; then
            ITEM_CONTENT_ID="${{ github.event.issue.node_id }}"
            REPO_NAME="${{ github.event.repository.name }}"
            REPO_OWNER="${{ github.event.repository.owner.login }}"
            echo "Processing issue: ${{ github.event.issue.html_url }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ITEM_CONTENT_ID="${{ github.event.pull_request.node_id }}"
            REPO_NAME="${{ github.event.repository.name }}"
            REPO_OWNER="${{ github.event.repository.owner.login }}"
            echo "Processing pull request: ${{ github.event.pull_request.html_url }}"
          fi

          echo "ITEM_CONTENT_ID=$ITEM_CONTENT_ID" >> $GITHUB_OUTPUT
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_OUTPUT

          PROJECT_RESPONSE=$(curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d '{
              "query": "query($org: String!, $projectTitle: String!) { organization(login: $org) { projectsV2(query: $projectTitle, first: 1) { nodes { id title } } } }",
              "variables": {
                "org": "'"$ORG_NAME"'",
                "projectTitle": "'"$PROJECT_TITLE"'"
              }
            }')

          PROJECT_ID=$(echo "$PROJECT_RESPONSE" | jq -r '.data.organization.projectsV2.nodes[0].id')
          if [ "$PROJECT_ID" == "null" ]; then
            echo "Error: Project with title '$PROJECT_TITLE' not found in organization '$ORG_NAME'."
            exit 1
          fi
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "Found Project ID: $PROJECT_ID"

      # --- STEP TO GET THE PROJECT ITEM ID ---
      - name: Get Project V2 Item ID for the Issue/PR
        id: get_project_item_id
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_SYNC_PAT }}
          PROJECT_ID: ${{ steps.get_initial_ids.outputs.PROJECT_ID }}       # Node ID of the ProjectV2
          ITEM_CONTENT_ID: ${{ steps.get_initial_ids.outputs.ITEM_CONTENT_ID }} # Node ID of the Issue/PR
        run: |
          echo "Attempting to find project item for content (Issue/PR) ID: $ITEM_CONTENT_ID within project ID: $PROJECT_ID"

          # GraphQL query to find a project item within a specific project by the content's (Issue/PR) Node ID.
          GRAPHQL_QUERY='
          query($projectId: ID!, $itemContentId: ID!) {
            node(id: $projectId) {  # Query the ProjectV2 node
              ... on ProjectV2 {
                title
                # Get the specific item by the content ID (Issue/PR ID)
                # An Issue/PR can only appear once in a given project.
                itemsByContentView(contentId: $itemContentId, first: 1) {
                  nodes {
                    id # This is the ProjectV2Item ID we are looking for
                  }
                  totalCount # Should be 0 if not found, 1 if found
                }
              }
            }
          }'

          # Prepare variables for the GraphQL query
          VARIABLES_JSON=$(jq -n \
            --arg projectId "$PROJECT_ID" \
            --arg itemContentId "$ITEM_CONTENT_ID" \
            '{ "projectId": $projectId, "itemContentId": $itemContentId }')

          # Construct the final JSON payload for curl
          JSON_PAYLOAD=$(jq -n --arg query "$GRAPHQL_QUERY" --argjson variables "$VARIABLES_JSON" \
            '{ query: $query, variables: $variables }')
            
          echo "Sending GraphQL Payload to find item by content ID within project:"
          echo "$JSON_PAYLOAD"

          PROJECT_ITEM_DATA_RESPONSE=$(curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d "$JSON_PAYLOAD")

          echo "GraphQL Response:"
          echo "$PROJECT_ITEM_DATA_RESPONSE"

          # Check for GraphQL errors
          if echo "$PROJECT_ITEM_DATA_RESPONSE" | jq -e '.errors' > /dev/null; then
            echo "Error: GraphQL query failed:"
            echo "$PROJECT_ITEM_DATA_RESPONSE" | jq '.errors'
            exit 1
          fi

          # Check if the project node itself was found and is a ProjectV2
          # (This check is more for robustness, as PROJECT_ID comes from a prior successful query)
          if echo "$PROJECT_ITEM_DATA_RESPONSE" | jq -e '.data.node == null or (.data.node | has("itemsByContentView") | not)' > /dev/null; then
            echo "Error: Could not resolve Project ID '$PROJECT_ID' to a ProjectV2 object, or 'itemsByContentView' field is missing."
            echo "Response was: $PROJECT_ITEM_DATA_RESPONSE"
            exit 1
          fi
          
          PROJECT_TITLE=$(echo "$PROJECT_ITEM_DATA_RESPONSE" | jq -r '.data.node.title // "Unknown Project"')
          TOTAL_COUNT=$(echo "$PROJECT_ITEM_DATA_RESPONSE" | jq -r '.data.node.itemsByContentView.totalCount // 0')

          if [ "$TOTAL_COUNT" -eq "0" ]; then
            echo "Warning: Item with Content ID '$ITEM_CONTENT_ID' was NOT found in Project '$PROJECT_TITLE' (ID: $PROJECT_ID) using 'itemsByContentView'."
            echo "Please ensure the issue/PR is indeed added to this project."
            exit 0 # Gracefully exit if item not found in the project
          fi
          
          # Extract the ProjectV2Item ID
          PROJECT_ITEM_ID=$(echo "$PROJECT_ITEM_DATA_RESPONSE" | jq -r '.data.node.itemsByContentView.nodes[0].id // empty')

          if [ -z "$PROJECT_ITEM_ID" ]; then
            # This should ideally be caught by TOTAL_COUNT == 0 if nodes array is empty,
            # but as a safeguard if nodes[0].id is null for some reason.
            echo "Error: Found totalCount=$TOTAL_COUNT for item '$ITEM_CONTENT_ID' in project '$PROJECT_TITLE', but could not extract a valid ProjectV2Item ID."
            echo "Response was: $PROJECT_ITEM_DATA_RESPONSE"
            exit 1 
          fi
          
          echo "PROJECT_ITEM_ID=$PROJECT_ITEM_ID" >> $GITHUB_OUTPUT
          echo "Found ProjectV2Item ID: $PROJECT_ITEM_ID for Content ID $ITEM_CONTENT_ID in Project '$PROJECT_TITLE' (ID: $PROJECT_ID)"
      - name: Get Project Status Field ID and Option ID for "Done"
        id: get_field_ids
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_SYNC_PAT }}
          PROJECT_ID: ${{ steps.get_initial_ids.outputs.PROJECT_ID }}
        run: |
          # ... (rest of this step - no change)
          FIELD_RESPONSE=$(curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d '{
              "query": "query($projectId: ID!) { node(id: $projectId) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2Field { id name } ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }",
              "variables": {
                "projectId": "'"$PROJECT_ID"'"
              }
            }')

          STATUS_FIELD_ID=$(echo "$FIELD_RESPONSE" | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .id')
          DONE_OPTION_ID=$(echo "$FIELD_RESPONSE" | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "Done") | .id')

          if [ "$STATUS_FIELD_ID" == "null" ]; then
            echo "Error: 'Status' field not found in project."
            exit 1
          fi
          if [ "$DONE_OPTION_ID" == "null" ]; then
            echo "Error: 'Done' option not found in 'Status' field."
            exit 1
          fi

          echo "STATUS_FIELD_ID=$STATUS_FIELD_ID" >> $GITHUB_OUTPUT
          echo "DONE_OPTION_ID=$DONE_OPTION_ID" >> $GITHUB_OUTPUT
          echo "Found Status Field ID: $STATUS_FIELD_ID, Done Option ID: $DONE_OPTION_ID"

      - name: Update Project Item Status to "Done"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_SYNC_PAT }}
          script: |
            const projectId = "${{ steps.get_initial_ids.outputs.PROJECT_ID }}";
            const projectItemId = "${{ steps.get_project_item_id.outputs.PROJECT_ITEM_ID }}"; // <-- USE PROJECT_ITEM_ID HERE
            const statusFieldId = "${{ steps.get_field_ids.outputs.STATUS_FIELD_ID }}";
            const doneOptionId = "${{ steps.get_field_ids.outputs.DONE_OPTION_ID }}";

            if (!projectItemId) { // Check for projectItemId, not itemNodeId
              core.info('Project item ID not found. Skipping status update.');
              return;
            }

            try {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) { # itemId instead of itemNodeId
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId, # <-- This is the key change here
                    fieldId: $fieldId,
                    value: {
                      singleSelectOptionId: $optionId
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }`, {
                projectId: projectId,
                itemId: projectItemId, // <-- Pass the ProjectV2Item's ID
                fieldId: statusFieldId,
                optionId: doneOptionId
              });
              core.info(`Successfully set status of ${{ github.event_name }} to "Done" in project.`);
            } catch (error) {
              // The error message "Could not resolve to a ProjectV2Item with the ID"
              // should now be caught by the new 'get_project_item_id' step's check,
              // or indicate a different issue.
              core.error(`Failed to update status to "Done" for ${{ github.event_name }}: ${error.message}`);
              core.setFailed(`Failed to update status to "Done" for ${{ github.event_name }}: ${error.message}`);
            }

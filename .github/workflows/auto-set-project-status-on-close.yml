name: Auto Set Project Status to Done on Close

on:
  issues:
    types:
      - closed
  pull_request:
    types:
      - closed
      - merged # Consider 'merged' as well, as a PR is effectively "done" when merged

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Needed for actions/checkout@v4 (optional if not checking out code)
      issues: write # Needed to read issue details (for node_id)
      pull-requests: write # Needed to read PR details (for node_id)
      organization_projects: write # Crucial for updating project items
      # Or just 'projects: write' if using classic token with broader permissions
      # Or if using a fine-grained token, ensure 'Organization projects: Read and write'
      # and 'Repository projects: Read and write' are enabled if applicable.

    steps:
      - name: Get Issue/PR Node ID and Project ID
        id: get_ids
        env:
          ORG_NAME: HisQu # Replace with your organization name
          PROJECT_TITLE: HisQu # Replace with your project title
          GITHUB_TOKEN: ${{ secrets.ORG_SYNC_PAT }} # Use your sync PAT

        run: |
          ITEM_NODE_ID=""
          REPO_NAME=""
          REPO_OWNER=""

          if [[ "${{ github.event_name }}" == "issues" ]]; then
            ITEM_NODE_ID="${{ github.event.issue.node_id }}"
            REPO_NAME="${{ github.event.repository.name }}"
            REPO_OWNER="${{ github.event.repository.owner.login }}"
            echo "Processing issue: ${{ github.event.issue.html_url }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ITEM_NODE_ID="${{ github.event.pull_request.node_id }}"
            REPO_NAME="${{ github.event.repository.name }}"
            REPO_OWNER="${{ github.event.repository.owner.login }}"
            echo "Processing pull request: ${{ github.event.pull_request.html_url }}"
          fi

          echo "ITEM_NODE_ID=$ITEM_NODE_ID" >> $GITHUB_OUTPUT
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_OUTPUT

          # Find the Project V2 ID (HisQu/HisQu project)
          PROJECT_RESPONSE=$(curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.ORG_SYNC_PAT }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d '{
              "query": "query($org: String!, $projectTitle: String!) { organization(login: $org) { projectsV2(query: $projectTitle, first: 1) { nodes { id title } } } }",
              "variables": {
                "org": "'"$ORG_NAME"'",
                "projectTitle": "'"$PROJECT_TITLE"'"
              }
            }')

          PROJECT_ID=$(echo "$PROJECT_RESPONSE" | jq -r '.data.organization.projectsV2.nodes[0].id')
          if [ "$PROJECT_ID" == "null" ]; then
            echo "Error: Project with title '$PROJECT_TITLE' not found in organization '$ORG_NAME'."
            exit 1
          fi
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "Found Project ID: $PROJECT_ID"

      - name: Get Project Status Field ID and Option ID for "Done"
        id: get_field_ids
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_SYNC_PAT }}
          PROJECT_ID: ${{ steps.get_ids.outputs.PROJECT_ID }}
        run: |
          FIELD_RESPONSE=$(curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.ORG_SYNC_PAT }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d '{
              "query": "query($projectId: ID!) { node(id: $projectId) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2Field { id name } ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }",
              "variables": {
                "projectId": "'"$PROJECT_ID"'"
              }
            }')

          STATUS_FIELD_ID=$(echo "$FIELD_RESPONSE" | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .id')
          DONE_OPTION_ID=$(echo "$FIELD_RESPONSE" | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "Done") | .id')

          if [ "$STATUS_FIELD_ID" == "null" ]; then
            echo "Error: 'Status' field not found in project."
            exit 1
          fi
          if [ "$DONE_OPTION_ID" == "null" ]; then
            echo "Error: 'Done' option not found in 'Status' field."
            exit 1
          fi

          echo "STATUS_FIELD_ID=$STATUS_FIELD_ID" >> $GITHUB_OUTPUT
          echo "DONE_OPTION_ID=$DONE_OPTION_ID" >> $GITHUB_OUTPUT
          echo "Found Status Field ID: $STATUS_FIELD_ID, Done Option ID: $DONE_OPTION_ID"

      - name: Update Project Item Status to "Done"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_SYNC_PAT }}
          script: |
            const projectId = "${{ steps.get_ids.outputs.PROJECT_ID }}";
            const itemNodeId = "${{ steps.get_ids.outputs.ITEM_NODE_ID }}";
            const statusFieldId = "${{ steps.get_field_ids.outputs.STATUS_FIELD_ID }}";
            const doneOptionId = "${{ steps.get_field_ids.outputs.DONE_OPTION_ID }}";

            if (!itemNodeId) {
              core.info('No issue or pull request node ID found. Skipping status update.');
              return;
            }

            try {
              await github.graphql(`
                mutation($projectId: ID!, $itemNodeId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemNodeId,
                    fieldId: $fieldId,
                    value: {
                      singleSelectOptionId: $optionId
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }`, {
                projectId: projectId,
                itemNodeId: itemNodeId,
                fieldId: statusFieldId,
                optionId: doneOptionId
              });
              core.info(`Successfully set status of ${{ github.event_name }} to "Done" in project.`);
            } catch (error) {
              // Gracefully handle if the item is not found in the project
              if (error.message.includes("Could not resolve to a ProjectV2Item with the ID")) {
                core.info(`Item (Issue/PR) with ID ${itemNodeId} is not in the project. Skipping status update.`);
              } else {
                core.error(`Failed to update status to "Done" for ${{ github.event_name }}: ${error.message}`);
                core.setFailed(`Failed to update status to "Done" for ${{ github.event_name }}: ${error.message}`);
              }
            }

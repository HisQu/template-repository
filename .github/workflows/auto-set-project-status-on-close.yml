name: Auto Set Project Status to Done on Close

on:
  issues:
    types:
      - closed
  pull_request:
    types:
      - closed
      - merged

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read # Changed to read, write not strictly needed for this workflow
      pull-requests: read # Changed to read, write not strictly needed for this workflow
      # No 'projects: write' here, relying on PAT scopes as discussed

    steps:
      - name: Get Issue/PR Node ID, Repo Info, and Project ID
        id: get_initial_ids # Renamed ID for clarity
        env:
          ORG_NAME: HisQu
          PROJECT_TITLE: HisQu
          GITHUB_TOKEN: ${{ secrets.ORG_SYNC_PAT }}
        run: |
          ITEM_CONTENT_ID="" # This will store the global ID of the Issue/PR
          REPO_NAME=""
          REPO_OWNER=""

          if [[ "${{ github.event_name }}" == "issues" ]]; then
            ITEM_CONTENT_ID="${{ github.event.issue.node_id }}"
            REPO_NAME="${{ github.event.repository.name }}"
            REPO_OWNER="${{ github.event.repository.owner.login }}"
            echo "Processing issue: ${{ github.event.issue.html_url }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ITEM_CONTENT_ID="${{ github.event.pull_request.node_id }}"
            REPO_NAME="${{ github.event.repository.name }}"
            REPO_OWNER="${{ github.event.repository.owner.login }}"
            echo "Processing pull request: ${{ github.event.pull_request.html_url }}"
          fi

          echo "ITEM_CONTENT_ID=$ITEM_CONTENT_ID" >> $GITHUB_OUTPUT
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_OUTPUT

          PROJECT_RESPONSE=$(curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d '{
              "query": "query($org: String!, $projectTitle: String!) { organization(login: $org) { projectsV2(query: $projectTitle, first: 1) { nodes { id title } } } }",
              "variables": {
                "org": "'"$ORG_NAME"'",
                "projectTitle": "'"$PROJECT_TITLE"'"
              }
            }')

          PROJECT_ID=$(echo "$PROJECT_RESPONSE" | jq -r '.data.organization.projectsV2.nodes[0].id')
          if [ "$PROJECT_ID" == "null" ]; then
            echo "Error: Project with title '$PROJECT_TITLE' not found in organization '$ORG_NAME'."
            exit 1
          fi
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "Found Project ID: $PROJECT_ID"

      # --- STEP TO GET THE PROJECT ITEM ID ---
      - name: Get Project V2 Item ID for the Issue/PR
        id: get_project_item_id
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_SYNC_PAT }}
          PROJECT_ID: ${{ steps.get_initial_ids.outputs.PROJECT_ID }}    # Target Project's Node ID
          ITEM_CONTENT_ID: ${{ steps.get_initial_ids.outputs.ITEM_CONTENT_ID }} # Issue/PR Node ID
        run: |
          echo "Attempting to find project item for content (Issue/PR) ID: $ITEM_CONTENT_ID within target project ID: $PROJECT_ID"

          # GraphQL query to get project items associated with the specific issue/PR
          # and then we will filter by the target project ID
          GRAPHQL_QUERY='
          query($nodeId: ID!) {
            node(id: $nodeId) {
              ... on Issue {
                projectV2Items(first: 20) { # An issue is rarely in more than a few projects
                  nodes {
                    id          # This is the ProjectV2Item ID we need
                    project {
                      id        # The ID of the project this item belongs to
                      title
                    }
                  }
                }
              }
              ... on PullRequest {
                projectV2Items(first: 20) {
                  nodes {
                    id
                    project {
                      id
                      title
                    }
                  }
                }
              }
            }
          }'

          # Prepare variables for the GraphQL query
          VARIABLES_JSON=$(jq -n --arg nodeId "$ITEM_CONTENT_ID" '{ "nodeId": $nodeId }')

          # Construct the final JSON payload for curl
          JSON_PAYLOAD=$(jq -n --arg query "$GRAPHQL_QUERY" --argjson variables "$VARIABLES_JSON" \
            '{ query: $query, variables: $variables }')
            
          echo "Sending GraphQL Payload to find linked project item:"
          echo "$JSON_PAYLOAD"

          ITEM_PROJECT_DATA_RESPONSE=$(curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d "$JSON_PAYLOAD")

          echo "GraphQL Response for Item's Project Links:"
          echo "$ITEM_PROJECT_DATA_RESPONSE"

          # Check for GraphQL errors
          if echo "$ITEM_PROJECT_DATA_RESPONSE" | jq -e '.errors' > /dev/null; then
            echo "Error: GraphQL query for item's project links failed:"
            echo "$ITEM_PROJECT_DATA_RESPONSE" | jq '.errors'
            exit 1
          fi

          # Extract the ProjectV2Item ID if the item is in our target project
          # The jq path accesses .data.node (which is the issue/PR)
          # then .projectV2Items.nodes (the list of project cards for that issue/PR)
          # then filters that list where the card's .project.id matches our target PROJECT_ID
          # and finally extracts the .id of that card.
          PROJECT_ITEM_ID=$(echo "$ITEM_PROJECT_DATA_RESPONSE" | jq -r \
            --arg TARGET_PROJECT_ID "$PROJECT_ID" \
            '.data.node.projectV2Items.nodes[]? | select(.project.id == $TARGET_PROJECT_ID) | .id // empty')

          if [ -z "$PROJECT_ITEM_ID" ]; then
            echo "Warning: Could not find the Item (Content ID: $ITEM_CONTENT_ID) linked to the specific target project (Project ID: $PROJECT_ID)."
            echo "The workflow was triggered for this item, but it does not appear to be in the specified project according to its own project links."
            echo "Please ensure the item is correctly added to the project '$PROJECT_ID' and that the IDs are correct."
            exit 0 # Gracefully exit if item not found linked to this specific project
          fi
          
          echo "PROJECT_ITEM_ID=$PROJECT_ITEM_ID" >> $GITHUB_OUTPUT
          echo "Found ProjectV2Item ID: $PROJECT_ITEM_ID (for Content ID $ITEM_CONTENT_ID) specifically linked to Project ID $PROJECT_ID"

      - name: Get Project Status Field ID and Option ID for "Done"
        id: get_field_ids
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_SYNC_PAT }}
          PROJECT_ID: ${{ steps.get_initial_ids.outputs.PROJECT_ID }}
        run: |
          # ... (rest of this step - no change)
          FIELD_RESPONSE=$(curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d '{
              "query": "query($projectId: ID!) { node(id: $projectId) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2Field { id name } ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }",
              "variables": {
                "projectId": "'"$PROJECT_ID"'"
              }
            }')

          STATUS_FIELD_ID=$(echo "$FIELD_RESPONSE" | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .id')
          DONE_OPTION_ID=$(echo "$FIELD_RESPONSE" | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "Done") | .id')

          if [ "$STATUS_FIELD_ID" == "null" ]; then
            echo "Error: 'Status' field not found in project."
            exit 1
          fi
          if [ "$DONE_OPTION_ID" == "null" ]; then
            echo "Error: 'Done' option not found in 'Status' field."
            exit 1
          fi

          echo "STATUS_FIELD_ID=$STATUS_FIELD_ID" >> $GITHUB_OUTPUT
          echo "DONE_OPTION_ID=$DONE_OPTION_ID" >> $GITHUB_OUTPUT
          echo "Found Status Field ID: $STATUS_FIELD_ID, Done Option ID: $DONE_OPTION_ID"

      - name: Update Project Item Status to "Done"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_SYNC_PAT }}
          script: |
            const projectId = "${{ steps.get_initial_ids.outputs.PROJECT_ID }}";
            const projectItemId = "${{ steps.get_project_item_id.outputs.PROJECT_ITEM_ID }}"; // <-- USE PROJECT_ITEM_ID HERE
            const statusFieldId = "${{ steps.get_field_ids.outputs.STATUS_FIELD_ID }}";
            const doneOptionId = "${{ steps.get_field_ids.outputs.DONE_OPTION_ID }}";

            if (!projectItemId) { // Check for projectItemId, not itemNodeId
              core.info('Project item ID not found. Skipping status update.');
              return;
            }

            try {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) { # itemId instead of itemNodeId
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId, # <-- This is the key change here
                    fieldId: $fieldId,
                    value: {
                      singleSelectOptionId: $optionId
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }`, {
                projectId: projectId,
                itemId: projectItemId, // <-- Pass the ProjectV2Item's ID
                fieldId: statusFieldId,
                optionId: doneOptionId
              });
              core.info(`Successfully set status of ${{ github.event_name }} to "Done" in project.`);
            } catch (error) {
              // The error message "Could not resolve to a ProjectV2Item with the ID"
              // should now be caught by the new 'get_project_item_id' step's check,
              // or indicate a different issue.
              core.error(`Failed to update status to "Done" for ${{ github.event_name }}: ${error.message}`);
              core.setFailed(`Failed to update status to "Done" for ${{ github.event_name }}: ${error.message}`);
            }
